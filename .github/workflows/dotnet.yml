name: Publish and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Publish for Windows x64
        run: dotnet publish -c Release -r win-x64 -o out/win-x64 --self-contained false /p:PublishSingleFile=true
        
      - name: Publish for Windows x64 (Self Contained)
        run: dotnet publish -c Release -r win-x64 -o out/win-x64-self-contained --self-contained true /p:PublishSingleFile=true

      - name: Publish for Linux x64
        run: dotnet publish -c Release -r linux-x64 -o out/linux-x64 --self-contained false /p:PublishSingleFile=true
        
      - name: Publish for Linux x64 (Self Contained)
        run: dotnet publish -c Release -r linux-x64 -o out/linux-x64-self-contained --self-contained true /p:PublishSingleFile=true

      - name: Zip files
        run: |
          cd ${{ github.workspace }}/out
          zip -r win-x64.zip win-x64
          zip -r linux-x64.zip linux-x64
          zip -r win-x64-self-contained.zip win-x64-self-contained
          zip -r linux-x64-self-contained.zip linux-x64-self-contained

#       - name: Get next release number
#         id: next_release
#         run: |
#           # Get the latest release
#           LATEST_RELEASE=$(curl -sL https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)

#           # Get the current date in the format YYYY.MM.DD
#           CURRENT_DATE=$(date +'%Y.%m.%d')

#           # Check if the latest release was on the same day
#           if [[ $LATEST_RELEASE == $CURRENT_DATE* ]]; then
#             # Increment the counter for the current day
#             COUNTER=$(echo $LATEST_RELEASE | awk -F. '{print $NF + 1}')
#             NEXT_RELEASE="$CURRENT_DATE.$COUNTER"
#           else
#             # First release of the day
#             NEXT_RELEASE="$CURRENT_DATE.1"
#           fi

#           # Set the output variable
#           echo "::set-output name=release_number::$NEXT_RELEASE"

      - name: Extract tag name
        id: extract_tag
        run: echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_RELEASE }}
        with:
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          release_name: ${{ steps.extract_tag.outputs.tag_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset for Windows x64
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_RELEASE }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/win-x64.zip
          asset_name: win-x64.zip
          asset_content_type: application/zip
          
      - name: Upload Release Asset for Windows x64 (Self-contained)
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_RELEASE }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/win-x64-self-contained.zip
          asset_name: win-x64-self-contained.zip
          asset_content_type: application/zip

      - name: Upload Release Asset for Linux x64
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_RELEASE }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/linux-x64.zip
          asset_name: linux-x64.zip
          asset_content_type: application/zip
          
      - name: Upload Release Asset for Linux x64 (Self-contained)
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_RELEASE }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/linux-x64-self-contained.zip
          asset_name: linux-x64-self-contained.zip
          asset_content_type: application/zip
